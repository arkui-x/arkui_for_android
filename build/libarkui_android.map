{
  global:
    extern "C++" {
      construction?vtable?for?OHOS::Ace::AceType-in-OHOS::Ace::Animator;
      construction?vtable?for?OHOS::Ace::AceType-in-OHOS::Ace::Container;
      construction?vtable?for?OHOS::Ace::AceType-in-OHOS::Ace::Framework::MediaQueryInfo;
      construction?vtable?for?OHOS::Ace::AceType-in-OHOS::Ace::Scheduler;
      construction?vtable?for?OHOS::Ace::AceType-in-OHOS::Ace::ThemeConstants;
      construction?vtable?for?OHOS::Ace::Container-in-OHOS::Ace::Platform::AceContainer;
      construction?vtable?for?OHOS::Ace::ScheduleTask-in-OHOS::Ace::Scheduler;
      construction?vtable?for?OHOS::Ace::ScheduleTask-in-OHOS::Ace::Scheduler;

      guard?variable?for?OHOS::Ace::Animator::TypeId??::myTypeId;
      guard?variable?for?OHOS::Ace::Container::TypeId??::myTypeId;
      guard?variable?for?OHOS::Ace::Framework::MediaQueryInfo::TypeId??::myTypeId;
      guard?variable?for?OHOS::Ace::LogWrapper::GetBriefFileName?char?const*?::separator;
      guard?variable?for?OHOS::Ace::Scheduler::TypeId??::myTypeId;
      guard?variable?for?OHOS::Ace::ThemeConstants::TypeId??::myTypeId;

      non-virtual?thunk?to?OHOS::Ace::Animator::~Animator*;


      OHOS::Ace::AceApplicationInfo::*;
      OHOS::Ace::AceEngine::*;
      OHOS::Ace::Alignment::*;
      OHOS::Ace::Animator::*;
      "OHOS::Ace::BaseId::BaseId()";
      OHOS::Ace::Color::*;
      OHOS::Ace::CommonNapiUtils::*;
      OHOS::Ace::Container::*;
      OHOS::Ace::Curves::*;
      OHOS::Ace::Dimension::*;
      OHOS::Ace::EngineHelper::*;
      OHOS::Ace::Framework::*;
      OHOS::Ace::GridSystemManager::*;
      OHOS::Ace::JsonUtil::*;
      OHOS::Ace::JsonValue::*;
      OHOS::Ace::Localization::*;
      OHOS::Ace::LogWrapper::*;
      OHOS::Ace::NapiAsyncEvnet::*;
      "OHOS::Ace::NG::AddPaddingToSize(OHOS::Ace::NG::PaddingPropertyT<float> const&, OHOS::Ace::NG::SizeT<float>&)";
      OHOS::Ace::NG::BoxLayoutAlgorithm::*;
      "OHOS::Ace::NG::CreateIdealSize(OHOS::Ace::NG::LayoutConstraintT<float> const&, OHOS::Ace::Axis, OHOS::Ace::NG::MeasureType)";
      "OHOS::Ace::NG::CreateIdealSize(OHOS::Ace::NG::LayoutConstraintT<float> const&, OHOS::Ace::Axis, OHOS::Ace::NG::MeasureType, bool)";
      OHOS::Ace::NG::GestureEventHub::*;
      OHOS::Ace::NG::FrameNode::*;
      OHOS::Ace::NG::LayoutProperty::*;
      OHOS::Ace::NG::LayoutWrapper::*;
      "OHOS::Ace::NG::MinusPaddingToSize(OHOS::Ace::NG::PaddingPropertyT<float> const&, OHOS::Ace::NG::SizeT<float>&)";
      OHOS::Ace::NG::Modifier::*;
      OHOS::Ace::NG::ModifierAdapter::*;
      "OHOS::Ace::NG::PanEventActuator::PanEventActuator(OHOS::Ace::WeakPtr<OHOS::Ace::NG::GestureEventHub> const&, OHOS::Ace::PanDirection, int, float)";
      "OHOS::Ace::NG::PipelineContext::GetCurrentContext()";
      OHOS::Ace::NG::ViewAbstract::*;
      OHOS::Ace::NG::ViewStackProcessor::*;
      OHOS::Ace::Platform::AceApplicationInfoImpl::*;
      OHOS::Ace::PipelineBase::*;
      OHOS::Ace::Scheduler::*;
      OHOS::Ace::ScopedDelegate::*;
      "OHOS::Ace::SystemGridInfo::ToString() const";
      OHOS::Ace::ThemeConstants::*;
      "OHOS::Ace::ToRSColor(OHOS::Ace::LinearColor const&)";
      OHOS::Ace::MemoryMonitor::*;
      "OHOS::Ace::SystemProperties::GetDebugEnabled()";
      "OHOS::Ace::SystemProperties::GetResourceDecoupling()";
      OHOS::Ace::V2::PATTERN_LOCK_ETS_TAG;
      OHOS::Ace::V2::QRCODE_ETS_TAG;
      OHOS::Ace::V2::RELATIVE_CONTAINER_ETS_TAG;
      OHOS::Ace::ViewAbstractModel::*;
      OHOS::Media::PixelMapNapi::*;
      OHOS::Rosen::Drawing::Bitmap::*;
      OHOS::Rosen::Drawing::CoreCanvas::*;
      OHOS::Rosen::Drawing::Pen::*;
      OHOS::Rosen::Drawing::ShaderEffect::*;
      OHOS::Rosen::Drawing::Brush::*;
      OHOS::Ace::ResourceManager::*;
      OHOS::Ace::SpringMotion::*;

      virtual?thunk?to?OHOS::Ace::Animator::~Animator??;

      vtable?for?OHOS::Ace::AceApplicationInfo;
      vtable?for?OHOS::Ace::Animator;
      vtable?for?OHOS::Ace::BaseId;
      vtable?for?OHOS::Ace::Container;
      vtable?for?OHOS::Ace::Framework::MediaQueryInfo;
      vtable?for?OHOS::Ace::Framework::RevSourceMap;
      vtable?for?OHOS::Ace::Framework::StandardFunctionCodec;
      vtable?for?OHOS::Ace::Localization;
      vtable?for?OHOS::Ace::Platform::AceApplicationInfoImpl;
      vtable?for?OHOS::Ace::Scheduler;
      vtable?for?OHOS::Ace::ThemeConstants;

      vtable?for?OHOS::Ace::NG::BoxLayoutAlgorithm;
      vtable?for?OHOS::Ace::NG::LayoutProperty;
      vtable?for?OHOS::Ace::NG::TouchEventActuator;

      VTT?for?OHOS::Ace::Animator;
      VTT?for?OHOS::Ace::Container;
      VTT?for?OHOS::Ace::Framework::MediaQueryInfo;
      VTT?for?OHOS::Ace::Scheduler;
      VTT?for?OHOS::Ace::ThemeConstants;

      VTT?for?OHOS::Ace::NG::BoxLayoutAlgorithm;
      VTT?for?OHOS::Ace::NG::LayoutProperty;
      VTT?for?OHOS::Ace::NG::TouchEventActuator;

      JNI_OnLoad;

      napi_*;
      uv_*;


      "PrintLog(LogLevel, char const*, ...)";

      OHOS::Ace::Platform::JniEnvironment::*;
      OHOS::Ace::Platform::PluginManagerJni::*;
      OHOS::Ace::Platform::GrantResultManager::*;
      OHOS::Ace::Platform::BridgeManager::*;
      OHOS::Ace::Platform::BufferMapping::*;

      "OHOS::AppExecFwk::AbilityDelegatorRegistry::GetAbilityDelegator()";
      "OHOS::AppExecFwk::AbilityDelegator::GetCurrentTopAbility()";
      "OHOS::AppExecFwk::AbilityDelegator::GetUIContent(int)";

      Json::Value::*;
      Json::CharReaderBuilder::*;
      Json::ValueIteratorBase::*;
      Json::StreamWriterBuilder::*;
      Json::Reader::*;
      Json::CharReader::*;
      NativeModuleManager::*;
      NativeEngine::*;
      SkBitmap::*;
      SkRGBA4f??SkAlphaType?3?::*;
      SkPaint::*;
      SkColorSpace::*;
      SkCanvas::*;
      SkBase64::*;
      SkImageInfo::*;
      SkCodec::*;
      SkSVGDOM::*;
      SkDynamicMemoryWStream::*;
      SkMemoryStream::*;
      WebPInitDecoderConfigInternal;
      WebPINewDecoder;
      WebPIUpdate;
      WebPIDelete;
      WebPFreeDecBuffer;
      WebPIDecGetRGB;
      WebPGetInfo;
      vtable?for?SkDynamicMemoryWStream;
      WebPPictureInitInternal;
      WebPPictureFree;
      WebPConfigInitInternal;
      WebPPictureImportRGB;
      WebPPictureImportRGBA;
      WebPPictureImportRGBX;
      WebPEncode;
      WebPNewInternal;
      WebPMuxSetImage;
      WebPMuxSetChunk;
      WebPMuxAssemble;
      WebPMuxDelete;
      SkData::*;

      memset_s;
      memcpy_s;
      sprintf_s;
      snprintf_s;
      sscanf_s;
      strcpy_s;
      vsprintf_s;
      memmove_s;
      vsnprintf_s;

      u_isdigit_69;
      u_isJavaSpaceChar_69;
      u_isWhitespace_69;
      u_charDirection_69;
      u_hasBinaryProperty_69;
      u_islower_69;
      u_isupper_69;
      u_charType_69;
      u_isJavaSpaceChar_69;
      ucase_toupper_69;
      uloc_toLegacyType_69;
      ucnv_open_69;
      UCNV_TO_U_CALLBACK_STOP_69;
      ucnv_setToUCallBack_69;
      ucnv_setFromUCallBack_69;
      UCNV_TO_U_CALLBACK_SUBSTITUTE_69;
      UCNV_FROM_U_CALLBACK_SUBSTITUTE_69;
      ucnv_close_69;
      ucnv_getMinCharSize_69;
      ucnv_toUnicode_69;
      ucnv_reset_69;
      ulocdata_getMeasurementSystem_69;
      "icu_69::ByteSink::GetAppendBuffer(int, int, char*, int, int*)";
      "icu_69::ByteSink::~ByteSink()";
      "icu_69::ByteSink::Flush()";
      "icu_69::Collator::createInstance(icu_69::Locale const&, UErrorCode&)";
      "icu_69::Calendar::createInstance(icu_69::Locale const&, UErrorCode&)";
      "icu_69::Calendar::clear()";
      "icu_69::Calendar::setTimeZone(icu_69::TimeZone const&)";
      "icu_69::Calendar::setTimeInMillis(double, UErrorCode&)";
      "icu_69::Calendar::getTimeInMillis(UErrorCode&) const";
      "icu_69::Collator::getKeywordValuesForLocale(char const*, icu_69::Locale const&, signed char, UErrorCode&)";
      "icu_69::CurrencyUnit::CurrencyUnit(icu_69::ConstChar16Ptr, UErrorCode&)";
      "icu_69::CurrencyUnit::~CurrencyUnit()";
      "icu_69::ConstrainedFieldPosition::ConstrainedFieldPosition()";
      "icu_69::ConstrainedFieldPosition::constrainCategory(int)";
      "icu_69::ConstrainedFieldPosition::~ConstrainedFieldPosition()";
      "icu_69::DateIntervalFormat::createInstance(icu_69::UnicodeString const&, icu_69::Locale const&, UErrorCode&)";
      "icu_69::DateFormat::createDateTimeInstance(icu_69::DateFormat::EStyle, icu_69::DateFormat::EStyle, icu_69::Locale const&)";
      "icu_69::DateFormat::createDateInstance(icu_69::DateFormat::EStyle, icu_69::Locale const&)";
      "icu_69::DateIntervalFormat::format(icu_69::Calendar&, icu_69::Calendar&, icu_69::UnicodeString&, icu_69::FieldPosition&, UErrorCode&) const";
      "icu_69::DateTimePatternGenerator::createInstance(icu_69::Locale const&, UErrorCode&)";
      "icu_69::DateTimePatternGenerator::getBestPattern(icu_69::UnicodeString const&, UErrorCode&)";
      "icu_69::DateTimePatternGenerator::replaceFieldTypes(icu_69::UnicodeString const&, icu_69::UnicodeString const&, UErrorCode&)";
      "icu_69::FieldPosition::~FieldPosition()";
      "icu_69::Format::format(icu_69::Formattable const&, icu_69::UnicodeString&, UErrorCode&) const";
      "icu_69::Formattable::Formattable(double)";
      "icu_69::Formattable::~Formattable()";
      "icu_69::FormattedRelativeDateTime::toString(UErrorCode&) const";
      "icu_69::FormattedRelativeDateTime::~FormattedRelativeDateTime()";
      "icu_69::FormattedRelativeDateTime::operator=(icu_69::FormattedRelativeDateTime&&)";
      "icu_69::FormattedRelativeDateTime::nextPosition(icu_69::ConstrainedFieldPosition&, UErrorCode&) const";
      "icu_69::Locale::Locale()";
      "icu_69::Locale::Locale(char const*, char const*, char const*, char const*)";
      "icu_69::Locale::Locale(icu_69::Locale const&)";
      "icu_69::Locale::~Locale()";
      "icu_69::Locale::forLanguageTag(icu_69::StringPiece, UErrorCode&)";
      "icu_69::Locale::operator=(icu_69::Locale&&)";
      "icu_69::Locale::getBaseName()";
      "icu_69::Locale::getBaseName() const";
      "icu_69::Locale::getAvailableLocales(int&)";
      "icu_69::Locale::addLikelySubtags(UErrorCode&)";
      "icu_69::Locale::setUnicodeKeywordValue(icu_69::StringPiece, icu_69::StringPiece, UErrorCode&)";
      "icu_69::Locale::minimizeSubtags(UErrorCode&)";
      "icu_69::Locale::isRightToLeft() const";
      "icu_69::Locale::getDisplayLanguage(icu_69::Locale const&, icu_69::UnicodeString&) const";
      "icu_69::LocaleBuilder::LocaleBuilder()";
      "icu_69::MeasureUnit::MeasureUnit()";
      "icu_69::MeasureUnit::MeasureUnit(icu_69::MeasureUnit const&)";
      "icu_69::MeasureUnit::~MeasureUnit()";
      "icu_69::MeasureUnit::getAvailable(icu_69::MeasureUnit*, int, UErrorCode&)";
      "icu_69::MeasureUnit::getSubtype() const";
      "icu_69::MeasureUnit::getType()";
      "icu_69::MeasureUnit::getType() const";
      "icu_69::MeasureUnit::getPercent()";
      "icu_69::NumberingSystem::createInstance(icu_69::Locale const&, UErrorCode&)";
      "icu_69::NumberingSystem::getName() const";
      "icu_69::number::Notation::simple()";
      "icu_69::number::NumberFormatter::withLocale(icu_69::Locale const&)";
      "icu_69::number::LocalizedNumberFormatter::operator=(icu_69::number::LocalizedNumberFormatter&&)";
      "icu_69::number::LocalizedNumberFormatter::~LocalizedNumberFormatter()";
      "icu_69::number::NumberFormatterSettings<icu_69::number::LocalizedNumberFormatter>::unit(icu_69::MeasureUnit const&) const &";
      "icu_69::number::NumberFormatterSettings<icu_69::number::LocalizedNumberFormatter>::unitWidth(UNumberUnitWidth) const &";
      "icu_69::number::Precision::maxFraction(int)";
      "icu_69::number::NumberFormatterSettings<icu_69::number::LocalizedNumberFormatter>::precision(icu_69::number::Precision const&) const &";
      "icu_69::number::NumberFormatterSettings<icu_69::number::LocalizedNumberFormatter>::grouping(UNumberGroupingStrategy) const &";
      "icu_69::number::NumberFormatterSettings<icu_69::number::LocalizedNumberFormatter>::sign(UNumberSignDisplay) const &";
      "icu_69::number::NumberFormatterSettings<icu_69::number::LocalizedNumberFormatter>::notation(icu_69::number::Notation const&) const &";
      "icu_69::number::Precision::maxSignificantDigits(int)";
      "icu_69::number::Precision::minSignificantDigits(int)";
      "icu_69::number::IntegerWidth::zeroFillTo(int)";
      "icu_69::number::NumberFormatterSettings<icu_69::number::LocalizedNumberFormatter>::integerWidth(icu_69::number::IntegerWidth const&) const &";
      "icu_69::number::Precision::minFraction(int)";
      "icu_69::number::Notation::scientific()";
      "icu_69::number::Notation::engineering()";
      "icu_69::number::Notation::compactShort()";
      "icu_69::number::Notation::compactLong()";
      "icu_69::number::LocalizedNumberFormatter::formatDouble(double, UErrorCode&) const";
      "icu_69::number::FormattedNumber::toString(UErrorCode&) const";
      "icu_69::number::FormattedNumber::~FormattedNumber()";
      "icu_69::number::impl::StringProp::~StringProp()";
      "icu_69::number::Scale::~Scale()";
      "icu_69::number::impl::SymbolsWrapper::~SymbolsWrapper()";
      "icu_69::number::NumberFormatterSettings<icu_69::number::LocalizedNumberFormatter>::roundingMode(UNumberFormatRoundingMode) &&";
      "icu_69::number::Precision::minMaxSignificantDigits(int, int)";
      "icu_69::number::Precision::minMaxFraction(int, int)";
      "icu_69::number::FormattedNumber::operator=(icu_69::number::FormattedNumber&&)";
      "icu_69::PluralRules::select(icu_69::number::FormattedNumber const&, UErrorCode&) const";
      "icu_69::PluralRules::forLocale(icu_69::Locale const&, UPluralType, UErrorCode&)";
      "icu_69::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu_69::Locale const&, icu_69::NumberFormat*, UDateRelativeDateTimeFormatterStyle, UDisplayContext, UErrorCode&)";
      "icu_69::RelativeDateTimeFormatter::formatToValue(double, URelativeDateTimeUnit, UErrorCode&) const";
      "icu_69::RelativeDateTimeFormatter::formatNumericToValue(double, URelativeDateTimeUnit, UErrorCode&) const";
      "icu_69::SimpleDateFormat::SimpleDateFormat(icu_69::UnicodeString const&, icu_69::Locale const&, UErrorCode&)";
      "icu_69::StringPiece::StringPiece(char const*)";
      "icu_69::TimeZone::createTimeZone(icu_69::UnicodeString const&)";
      "icu_69::UnicodeString::UnicodeString(char const*, int)";
      "icu_69::UnicodeString::UnicodeString(char const*)";
      "icu_69::UnicodeString::UnicodeString(char16_t)";
      "icu_69::UnicodeString::UnicodeString(icu_69::UnicodeString const&)";
      "icu_69::UnicodeString::~UnicodeString()";
      "icu_69::UnicodeString::fromUTF8(icu_69::StringPiece)";
      "icu_69::UnicodeString::findAndReplace(int, int, icu_69::UnicodeString const&, int, int, icu_69::UnicodeString const&, int, int)";
      "icu_69::UnicodeString::toUTF8(icu_69::ByteSink&) const";
      "icu_69::UnicodeString::operator=(icu_69::UnicodeString&&)";
      "icu_69::UnicodeString::operator=(icu_69::UnicodeString const&)";
      "icu_69::UnicodeString::doAppend(icu_69::UnicodeString const&, int, int)";
      "icu_69::UnicodeString::doAppend(char16_t const*, int, int)";
      "icu_69::UMemory::operator new(unsigned long)";
      "icu_69::UMemory::operator new(unsigned int)";
      "icu_69::UMemory::operator delete(void*)";
      "icu_69::UnicodeString::char32At(int) const";
      "icu_69::BreakIterator::createLineInstance(icu_69::Locale const&, UErrorCode&)";
      "icu_69::GregorianCalendar::GregorianCalendar(UErrorCode&)";
      "icu_69::BuddhistCalendar::BuddhistCalendar(icu_69::Locale const&, UErrorCode&)";
      "icu_69::IndianCalendar::IndianCalendar(icu_69::Locale const&, UErrorCode&)";
      "icu_69::ChineseCalendar::ChineseCalendar(icu_69::Locale const&, UErrorCode&)";
      "icu_69::IslamicCalendar::IslamicCalendar(icu_69::Locale const&, UErrorCode&, icu_69::IslamicCalendar::ECalculationType)";
      "icu_69::CopticCalendar::CopticCalendar(icu_69::Locale const&, UErrorCode&)";
      "icu_69::EthiopicCalendar::EthiopicCalendar(icu_69::Locale const&, UErrorCode&, icu_69::EthiopicCalendar::EEraType)";
      "icu_69::HebrewCalendar::HebrewCalendar(icu_69::Locale const&, UErrorCode&)";
      "icu_69::GregorianCalendar::GregorianCalendar(icu_69::Locale const&, UErrorCode&)";
      "icu_69::JapaneseCalendar::JapaneseCalendar(icu_69::Locale const&, UErrorCode&)";
      "icu_69::PersianCalendar::PersianCalendar(icu_69::Locale const&, UErrorCode&)";
      "icu_69::Calendar::getTimeZone() const";
      "icu_69::Calendar::set(int, int, int)";
      "icu_69::Calendar::set(UCalendarDateFields, int)";
      "icu_69::Calendar::get(UCalendarDateFields, UErrorCode&) const";
      "icu_69::Calendar::setMinimalDaysInFirstWeek(unsigned char)";
      "icu_69::Calendar::setFirstDayOfWeek(UCalendarDaysOfWeek)";
      "icu_69::Calendar::getMinimalDaysInFirstWeek() const";
      "icu_69::Calendar::getFirstDayOfWeek() const";
      "icu_69::LocaleDisplayNames::createInstance(icu_69::Locale const&, UDialectHandling)";
      "icu_69::Normalizer2::getNFCInstance(UErrorCode&)";
      "icu_69::Normalizer2::getNFDInstance(UErrorCode&)";
      "icu_69::Normalizer2::getNFKCInstance(UErrorCode&)";
      "icu_69::Normalizer2::getNFKDInstance(UErrorCode&)";
      "icu_69::TimeZone::getDisplayName(signed char, icu_69::TimeZone::EDisplayType, icu_69::Locale const&, icu_69::UnicodeString&) const";
      "icu_69::AlphabeticIndex::AlphabeticIndex(icu_69::Locale const&, UErrorCode&)";
      "icu_69::LocaleBuilder::setRegion(icu_69::StringPiece)";
      "icu_69::LocaleBuilder::~LocaleBuilder()";
      "icu_69::LocaleBuilder::build(UErrorCode&)";
      "icu_69::Locale::getDisplayCountry(icu_69::Locale const&, icu_69::UnicodeString&) const";
      "icu_69::UnicodeString::replace(int, int, int)";
      "icu_69::Transliterator::createInstance(icu_69::UnicodeString const&, UTransDirection, UErrorCode&)";
      "icu_69::Transliterator::getAvailableIDs(UErrorCode&)";
      "icu_69::number::Scale::powerOfTen(int)";
      "icu_69::number::Precision::fixedFraction(int)";
      "icu_69::number::NumberFormatterSettings<icu_69::number::LocalizedNumberFormatter>::scale(icu_69::number::Scale const&) &&";
      "icu_69::number::NumberFormatterSettings<icu_69::number::LocalizedNumberFormatter>::precision(icu_69::number::Precision const&) &&";
      "icu_69::Locale::createFromName(char const*)";
      "u_charDigitValue_69";
      "icu_69::RegexPattern::compile(icu_69::UnicodeString const&, unsigned int, UParseError&, UErrorCode&)";
      "icu_69::RegexPattern::~RegexPattern()";
      "icu_69::UnicodeString::tempSubString(int, int) const";
      "icu_69::RegexPattern::matcher(icu_69::UnicodeString const&, UErrorCode&) const";
      icu_69::RegexMatcher::lookingAt*;
      icu_69::RegexMatcher::find*;
      "icu_69::RegexMatcher::groupCount() const";
      "icu_69::RegexMatcher::group(int, UErrorCode&) const";
      "icu_69::RegexMatcher::end(UErrorCode&) const";
      "icu_69::RegexMatcher::~RegexMatcher()";
      icu_69::RegexMatcher::matches*;
      "icu_69::RegexMatcher::find()";
      "icu_69::RegexMatcher::appendReplacement(icu_69::UnicodeString&, icu_69::UnicodeString const&, UErrorCode&)";
      "icu_69::RegexMatcher::appendTail(icu_69::UnicodeString&)";
      udata_setCommonData*;
      OH_ResourceManager_*;

      vtable?for?icu_69::UnicodeString;
      vtable?for?icu_69::FieldPosition;
      vtable?for?icu_69::FormattedRelativeDateTime;
      vtable?for?icu_69::LocaleBuilder;

      "LogPrint(LogLevel, char const*, ...)";
      ARKUI_X_Plugin_*;
      OHOS::Plugin::PluginUtilsInner::*;
      OHOS::Plugin::PluginUtilsNApi::*;

      "OHOS::Ace::ToRSColor(OHOS::Ace::Color const&)";
      OHOS::Rosen::Drawing::Filter::*;
      OHOS::Rosen::Drawing::MaskFilter::*;
      OHOS::Rosen::Drawing::Path::*;
      OHOS::Ace::AnimationUtils::*;
      OHOS::Ace::NG::FocusHub::*;
      OHOS::Ace::NG::InputEventHub::*;
      OHOS::Ace::NG::InputEventActuator::*;
      
      OHOS::AppExecFwk::EventHandler::*;
      OHOS::AppExecFwk::EventRunner::*;
      OHOS::AppExecFwk::InnerEvent::*;
      fill_fopen_filefunc;
      unzOpen2;
      zipOpen2;
      zipOpenNewFileInZip4;
      unzClose;
      unzGetGlobalInfo;
      unzGetFilePos;
      unzGoToNextFile;
      unzGetCurrentFileInfo;
      unzOpenCurrentFile;
      unzReadCurrentFile;
      unzCloseCurrentFile;
      zipClose;
      zipWriteInFileInZip;
      zipCloseFileInZip;
      "OHOS::IncludeTrailingPathDelimiter(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      OHOS::Rosen::RSRenderServiceClient::*;
      OHOS::Rosen::DisplayInfo::*;
      "OHOS::AbilityRuntime::GetNativePointerFromCallbackInfo(napi_env__*, napi_callback_info__*, char const*)";
      "OHOS::AbilityRuntime::CreateJsError(napi_env__*, int, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::AbilityRuntime::BindNativeFunction(napi_env__*, napi_value__*, char const*, char const*, napi_value__* (*)(napi_env__*, napi_callback_info__*))";
    };
  local:
    *;
};
