{
  global:
    extern "C++" {
      construction?vtable?for?OHOS::Ace::AceType-in-OHOS::Ace::Animator;
      construction?vtable?for?OHOS::Ace::AceType-in-OHOS::Ace::Container;
      construction?vtable?for?OHOS::Ace::AceType-in-OHOS::Ace::Framework::MediaQueryInfo;
      construction?vtable?for?OHOS::Ace::AceType-in-OHOS::Ace::Scheduler;
      construction?vtable?for?OHOS::Ace::AceType-in-OHOS::Ace::ThemeConstants;
      construction?vtable?for?OHOS::Ace::Container-in-OHOS::Ace::Platform::AceContainer;
      construction?vtable?for?OHOS::Ace::ScheduleTask-in-OHOS::Ace::Scheduler;
      construction?vtable?for?OHOS::Ace::ScheduleTask-in-OHOS::Ace::Scheduler;

      guard?variable?for?OHOS::Ace::Animator::TypeId??::myTypeId;
      guard?variable?for?OHOS::Ace::Container::TypeId??::myTypeId;
      guard?variable?for?OHOS::Ace::Framework::MediaQueryInfo::TypeId??::myTypeId;
      guard?variable?for?OHOS::Ace::LogWrapper::GetBriefFileName?char?const*?::separator;
      guard?variable?for?OHOS::Ace::Scheduler::TypeId??::myTypeId;
      guard?variable?for?OHOS::Ace::ThemeConstants::TypeId??::myTypeId;

      non-virtual?thunk?to?OHOS::Ace::Animator::~Animator*;


      OHOS::Ace::AceApplicationInfo::*;
      OHOS::Ace::AceEngine::*;
      OHOS::Ace::AceScopedTrace::*;
      OHOS::Ace::Alignment::*;
      OHOS::Ace::Animator::*;
      "OHOS::Ace::BaseId::BaseId()";
      "OHOS::Ace::CheckThread(OHOS::Ace::TaskExecutor::TaskType)";
      OHOS::Ace::Color::*;
      OHOS::Ace::CommonNapiUtils::*;
      OHOS::Ace::Container::*;
      OHOS::Ace::Curves::*;
      OHOS::Ace::Dimension::*;
      OHOS::Ace::EngineHelper::*;
      OHOS::Ace::Framework::*;
      OHOS::Ace::GridSystemManager::*;
      OHOS::Ace::JsonUtil::*;
      OHOS::Ace::JsonValue::*;
      OHOS::Ace::Localization::*;
      OHOS::Ace::LogWrapper::*;
      OHOS::Ace::NapiAsyncEvnet::*;
      "OHOS::Ace::NG::AddPaddingToSize(OHOS::Ace::NG::PaddingPropertyT<float> const&, OHOS::Ace::NG::SizeT<float>&)";
      OHOS::Ace::NG::BoxLayoutAlgorithm::*;
      "OHOS::Ace::NG::CreateIdealSize(OHOS::Ace::NG::LayoutConstraintT<float> const&, OHOS::Ace::Axis, OHOS::Ace::NG::MeasureType)";
      "OHOS::Ace::NG::CreateIdealSize(OHOS::Ace::NG::LayoutConstraintT<float> const&, OHOS::Ace::Axis, OHOS::Ace::NG::MeasureType, bool)";
      "OHOS::Ace::NG::DragControllerFuncWrapper::SubWindowShow(OHOS::Ace::RefPtr<OHOS::Ace::PipelineBase> const&)";
      "OHOS::Ace::NG::DragControllerFuncWrapper::TryDoDragStartAnimation(OHOS::Ace::RefPtr<OHOS::Ace::Subwindow> const&, OHOS::Ace::NG::PreparedInfoForDrag&, OHOS::Ace::NG::PreparedAsyncCtxForAnimate&)";
      "OHOS::Ace::NG::DragControllerFuncWrapper::GetUpdateDragMovePosition(int)";
      "OHOS::Ace::NG::DragControllerFuncWrapper::ResetContextMenuDragPosition(int)";
      "OHOS::Ace::NG::DragControllerFuncWrapper::CreatePreviewNode(OHOS::Ace::RefPtr<OHOS::Ace::NG::FrameNode>&, OHOS::Ace::NG::PreparedInfoForDrag&, OHOS::Ace::NG::PreparedAsyncCtxForAnimate&)";
      "OHOS::Ace::NG::DragControllerFuncWrapper::GetOriginNodeOffset(OHOS::Ace::NG::PreparedInfoForDrag&, OHOS::Ace::NG::PreparedAsyncCtxForAnimate&)";
      "OHOS::Ace::NG::DragControllerFuncWrapper::HideDragPreviewWindow(int)";
      "OHOS::Ace::ElementRegister::GetInstance()";
      "OHOS::Ace::ElementRegister::GetUINodeById(int)";
      "OHOS::Ace::Subwindow::CreateSubwindow(int)";
      OHOS::Ace::NG::GestureEventHub::*;
      OHOS::Ace::NG::FrameNode::*;
      OHOS::Ace::NG::LayoutProperty::*;
      OHOS::Ace::NG::LayoutWrapper::*;
      "OHOS::Ace::NG::MinusPaddingToSize(OHOS::Ace::NG::PaddingPropertyT<float> const&, OHOS::Ace::NG::SizeT<float>&)";
      OHOS::Ace::NG::Modifier::*;
      OHOS::Ace::NG::ModifierAdapter::*;
      "OHOS::Ace::NG::NodeRenderStatusMonitor::IsRegisterNodeRenderStateChangeCallbackExceedLimit()";
      "OHOS::Ace::NG::Inspector::GetFrameNodeByKey(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, bool, bool)";
      "OHOS::Ace::NG::NodeRenderStatusMonitor::RegisterNodeRenderStatusListener(OHOS::Ace::NG::FrameNode*, std::__ndk1::function<void (OHOS::Ace::NG::FrameNode*, OHOS::Ace::NG::NodeRenderState, OHOS::Ace::NG::RenderMonitorReason)>&&, OHOS::Ace::NG::MonitorSourceType)";
      "OHOS::Ace::NG::NodeRenderStatusMonitor::GetNodeCurrentRenderState(OHOS::Ace::NG::FrameNode*)";
      "OHOS::Ace::NG::NodeRenderStatusMonitor::UnRegisterNodeRenderStatusListener(OHOS::Ace::NG::FrameNode*, int)";
      "OHOS::Ace::NG::PanEventActuator::PanEventActuator(OHOS::Ace::WeakPtr<OHOS::Ace::NG::GestureEventHub> const&, OHOS::Ace::PanDirection, int, float)";
      "OHOS::Ace::NG::PipelineContext::GetCurrentContext()";
      "OHOS::Ace::NG::PanRecognizer::GetDistance() const";
      OHOS::Ace::NG::ViewAbstract::*;
      OHOS::Ace::NG::ViewStackProcessor::*;
      OHOS::Ace::NG::UINode::*;
      OHOS::Ace::NG::OverlayManager::*;
      OHOS::Ace::Platform::AceApplicationInfoImpl::*;
      OHOS::Ace::PipelineBase::*;
      OHOS::Ace::Scheduler::*;
      OHOS::Ace::ScopedDelegate::*;
      "OHOS::Ace::SystemGridInfo::ToString() const";
      OHOS::Ace::ThemeConstants::*;
      "OHOS::Ace::ToRSColor(OHOS::Ace::LinearColor const&)";
      "OHOS::Ace::TouchEventTarget::GetAttachedNode() const";
      "OHOS::Ace::NG::NGGestureRecognizer::IsInResponseLinkRecognizers()";
      OHOS::Ace::MemoryMonitor::*;
      "OHOS::Ace::SystemProperties::colorMode_";
      "OHOS::Ace::SystemProperties::GetDebugEnabled()";
      "OHOS::Ace::SystemProperties::GetResourceDecoupling()";
      "OHOS::Ace::SystemProperties::taskPriorityAdjustmentEnable_";
      "OHOS::Ace::SystemProperties::debugEnabled_";
      "OHOS::Ace::SystemProperties::debugFlags_";
      OHOS::Ace::V2::PATTERN_LOCK_ETS_TAG;
      OHOS::Ace::V2::QRCODE_ETS_TAG;
      OHOS::Ace::V2::RELATIVE_CONTAINER_ETS_TAG;
      OHOS::Ace::V2::ROOT_ETS_TAG;
      OHOS::Ace::V2::STAGE_ETS_TAG;
      OHOS::Ace::V2::PAGE_ETS_TAG;
      OHOS::Ace::ViewAbstractModel::*;
      OHOS::Media::PixelMapNapi::*;
      "OHOS::Media::StrToULL(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, unsigned long&)";
      OHOS::Rosen::Drawing::Bitmap::*;
      OHOS::Rosen::Drawing::CoreCanvas::*;
      OHOS::Rosen::Drawing::Pen::*;
      OHOS::Rosen::Drawing::ShaderEffect::*;
      OHOS::Rosen::Drawing::Brush::*;
      "OHOS::Rosen::Occlusion::Region::OrSelf(OHOS::Rosen::Occlusion::Region&)";
      OHOS::Ace::ResourceManager::*;
      OHOS::Ace::SpringMotion::*;
      OHOS::Ace::ShadowTheme::*;
      OHOS::Ace::PerfMonitor::*;
      WorkerManager::*;
      "DataProtector::AutDecrypt(unsigned long, unsigned long) const";
      "DataProtector::AutDecrypt(unsigned int, unsigned int) const";
      "DataProtector::PacEncrypt(unsigned long, unsigned long)";
      "DataProtector::PacEncrypt(unsigned int, unsigned int)";
      "NapiErrorManager::GetInstance()";
      "NapiErrorManager::NotifyUncaughtException(napi_env__*, napi_value__*, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, unsigned int)";
      "NapiErrorManager::NotifyUnhandledRejection(napi_env__*, napi_value__**, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, unsigned int)";

      virtual?thunk?to?OHOS::Ace::Animator::~Animator??;
      virtual?thunk?to?OHOS::Ace::NG::LayoutProperty::~LayoutProperty??;

      vtable?for?OHOS::Ace::AceApplicationInfo;
      vtable?for?OHOS::Ace::Animator;
      vtable?for?OHOS::Ace::BaseId;
      vtable?for?OHOS::Ace::Container;
      vtable?for?OHOS::Ace::Framework::MediaQueryInfo;
      vtable?for?OHOS::Ace::Framework::RevSourceMap;
      vtable?for?OHOS::Ace::Framework::StandardFunctionCodec;
      vtable?for?OHOS::Ace::Localization;
      vtable?for?OHOS::Ace::Platform::AceApplicationInfoImpl;
      vtable?for?OHOS::Ace::Scheduler;
      vtable?for?OHOS::Ace::ThemeConstants;

      vtable?for?OHOS::Ace::NG::BoxLayoutAlgorithm;
      vtable?for?OHOS::Ace::NG::LayoutProperty;
      vtable?for?OHOS::Ace::NG::TouchEventActuator;
      vtable?for?OHOS::Ace::ResourceWrapper;

      vtable?for?OHOS::NetStack::Socks5::Socks5ProxyResponse;
      vtable?for?OHOS::NetStack::Socks5::Socks5MethodRequest;
      vtable?for?OHOS::NetStack::Socks5::Socks5NoneMethod;
      vtable?for?OHOS::NetStack::Socks5::Socks5UdpHeader;

      VTT?for?OHOS::Ace::Animator;
      VTT?for?OHOS::Ace::Container;
      VTT?for?OHOS::Ace::Framework::MediaQueryInfo;
      VTT?for?OHOS::Ace::Scheduler;
      VTT?for?OHOS::Ace::ThemeConstants;
      VTT?for?OHOS::Ace::NG::Pattern;

      VTT?for?OHOS::Ace::NG::BoxLayoutAlgorithm;
      VTT?for?OHOS::Ace::NG::LayoutProperty;
      VTT?for?OHOS::Ace::NG::TouchEventActuator;
      VTT?for?OHOS::Ace::ResourceWrapper;

      JNI_OnLoad;

      napi_*;
      uv_*;


      "PrintLog(LogLevel, char const*, ...)";

      OHOS::Ace::Platform::JniEnvironment::*;
      OHOS::Ace::Platform::PluginManagerJni::*;
      OHOS::Ace::Platform::GrantResultManager::*;
      OHOS::Ace::Platform::BridgeManager::*;
      OHOS::Ace::Platform::BufferMapping::*;
      OHOS::Ace::SubwindowManager::*;
      OHOS::Ace::NG::UIObserverHandler::*;
      "OHOS::Ace::NG::Pattern::OnColorModeChange(unsigned int)";

      "OHOS::AppExecFwk::AbilityDelegatorRegistry::GetAbilityDelegator()";
      "OHOS::AppExecFwk::AbilityDelegator::GetCurrentTopAbility()";
      "OHOS::AppExecFwk::AbilityDelegator::GetUIContent(int)";

      Json::Value::*;
      Json::CharReaderBuilder::*;
      Json::ValueIteratorBase::*;
      Json::StreamWriterBuilder::*;
      Json::Reader::*;
      Json::CharReader::*;
      cJSON_Parse;
      cJSON_Delete;
      cJSON_CreateObject;
      cJSON_AddItemToObject;
      cJSON_CreateString;
      cJSON_PrintUnformatted;
      cJSON_GetArraySize;
      cJSON_GetArrayItem;
      cJSON_IsObject;
      cJSON_GetStringValue;
      cJSON_Print;
      NativeModuleManager::*;
      NativeEngine::*;
      SkBitmap::*;
      SkRGBA4f??SkAlphaType?3?::*;
      SkPaint::*;
      SkColorSpace::*;
      SkCanvas::*;
      SkBase64::*;
      SkImageInfo::*;
      SkCodec::*;
      SkSVGDOM::*;
      SkDynamicMemoryWStream::*;
      SkMemoryStream::*;
      WebPInitDecoderConfigInternal;
      WebPINewDecoder;
      WebPIUpdate;
      WebPIDelete;
      WebPFreeDecBuffer;
      WebPIDecGetRGB;
      WebPGetInfo;
      vtable?for?SkDynamicMemoryWStream;
      WebPPictureInitInternal;
      WebPPictureFree;
      WebPConfigInitInternal;
      WebPPictureImportRGB;
      WebPPictureImportRGBA;
      WebPPictureImportRGBX;
      WebPEncode;
      WebPNewInternal;
      WebPMuxSetImage;
      WebPMuxSetChunk;
      WebPMuxAssemble;
      WebPMuxDelete;
      SkData::*;

      OH_NativeXComponent_GetXComponentId;
      OH_NativeXComponent_GetXComponentSize;
      OH_NativeXComponent_RegisterCallback;
      OH_NativeXComponent_GetTouchEvent;
      OH_NativeXComponent_GetXComponentOffset;
      OH_NativeXComponent_GetMouseEvent;
      OH_NativeXComponent_RegisterMouseEventCallback;
      OH_NativeXComponent_GetTouchPointToolType;
      OH_NativeXComponent_GetTouchPointTiltX;
      OH_NativeXComponent_GetTouchPointTiltY;
      OH_NativeXComponent_RegisterFocusEventCallback;
      OH_NativeXComponent_RegisterKeyEventCallback;
      OH_NativeXComponent_RegisterBlurEventCallback;
      OH_NativeXComponent_GetKeyEvent;
      OH_NativeXComponent_GetKeyEventAction;
      OH_NativeXComponent_GetKeyEventCode;
      OH_NativeXComponent_GetKeyEventSourceType;
      OH_NativeXComponent_GetKeyEventDeviceId;
      OH_NativeXComponent_GetKeyEventTimestamp;
      OH_NativeXComponent_GetHistoricalPoints;
      OH_NativeXComponent_SetExpectedFrameRateRange;
      OH_NativeXComponent_RegisterOnFrameCallback;
      OH_NativeXComponent_UnregisterOnFrameCallback;

      memset_s;
      memcpy_s;
      sprintf_s;
      snprintf_s;
      sscanf_s;
      strcpy_s;
      vsprintf_s;
      memmove_s;
      vsnprintf_s;
      vsnprintf_truncated_s;

      u_isdigit_72;
      u_isJavaSpaceChar_72;
      u_isWhitespace_72;
      u_charDirection_72;
      u_hasBinaryProperty_72;
      u_islower_72;
      u_isupper_72;
      u_charType_72;
      u_isJavaSpaceChar_72;
      ucase_toupper_72;
      uloc_toLegacyType_72;
      ucnv_open_72;
      UCNV_TO_U_CALLBACK_STOP_72;
      ucnv_setToUCallBack_72;
      ucnv_setFromUCallBack_72;
      UCNV_TO_U_CALLBACK_SUBSTITUTE_72;
      UCNV_FROM_U_CALLBACK_SUBSTITUTE_72;
      ucnv_close_72;
      ucnv_getMinCharSize_72;
      ucnv_getType_72;
      ucnv_toUnicode_72;
      ucnv_reset_72;
      ulocdata_getMeasurementSystem_72;
      u_errorName_72;
      ucnv_toUCountPending_72;
      ucol_open_72;
      ucol_setAttribute_72;
      uiter_setUTF8_72;
      ucol_strcollIter_72;
      ucol_close_72;
      "icu_72::ByteSink::GetAppendBuffer(int, int, char*, int, int*)";
      "icu_72::ByteSink::~ByteSink()";
      "icu_72::ByteSink::Flush()";
      "icu_72::Collator::createInstance(icu_72::Locale const&, UErrorCode&)";
      "icu_72::Calendar::createInstance(icu_72::Locale const&, UErrorCode&)";
      "icu_72::Calendar::clear()";
      "icu_72::Calendar::setTimeZone(icu_72::TimeZone const&)";
      "icu_72::Calendar::setTimeInMillis(double, UErrorCode&)";
      "icu_72::Calendar::getTimeInMillis(UErrorCode&) const";
      "icu_72::Collator::getKeywordValuesForLocale(char const*, icu_72::Locale const&, signed char, UErrorCode&)";
      "icu_72::CurrencyUnit::CurrencyUnit(icu_72::ConstChar16Ptr, UErrorCode&)";
      "icu_72::CurrencyUnit::~CurrencyUnit()";
      "icu_72::ConstrainedFieldPosition::ConstrainedFieldPosition()";
      "icu_72::ConstrainedFieldPosition::constrainCategory(int)";
      "icu_72::ConstrainedFieldPosition::~ConstrainedFieldPosition()";
      "icu_72::DateIntervalFormat::createInstance(icu_72::UnicodeString const&, icu_72::Locale const&, UErrorCode&)";
      "icu_72::DateFormat::createDateTimeInstance(icu_72::DateFormat::EStyle, icu_72::DateFormat::EStyle, icu_72::Locale const&)";
      "icu_72::DateFormat::createDateInstance(icu_72::DateFormat::EStyle, icu_72::Locale const&)";
      "icu_72::DateIntervalFormat::format(icu_72::Calendar&, icu_72::Calendar&, icu_72::UnicodeString&, icu_72::FieldPosition&, UErrorCode&) const";
      "icu_72::DateTimePatternGenerator::createInstance(icu_72::Locale const&, UErrorCode&)";
      "icu_72::DateTimePatternGenerator::getBestPattern(icu_72::UnicodeString const&, UErrorCode&)";
      "icu_72::DateTimePatternGenerator::replaceFieldTypes(icu_72::UnicodeString const&, icu_72::UnicodeString const&, UErrorCode&)";
      "icu_72::FieldPosition::~FieldPosition()";
      "icu_72::Format::format(icu_72::Formattable const&, icu_72::UnicodeString&, UErrorCode&) const";
      "icu_72::Formattable::Formattable(double)";
      "icu_72::Formattable::~Formattable()";
      "icu_72::FormattedRelativeDateTime::toString(UErrorCode&) const";
      "icu_72::FormattedRelativeDateTime::~FormattedRelativeDateTime()";
      "icu_72::FormattedRelativeDateTime::operator=(icu_72::FormattedRelativeDateTime&&)";
      "icu_72::FormattedRelativeDateTime::nextPosition(icu_72::ConstrainedFieldPosition&, UErrorCode&) const";
      "icu_72::Locale::Locale()";
      "icu_72::Locale::Locale(char const*, char const*, char const*, char const*)";
      "icu_72::Locale::Locale(icu_72::Locale const&)";
      "icu_72::Locale::~Locale()";
      "icu_72::Locale::forLanguageTag(icu_72::StringPiece, UErrorCode&)";
      "icu_72::Locale::operator=(icu_72::Locale&&)";
      "icu_72::Locale::getBaseName()";
      "icu_72::Locale::getBaseName() const";
      "icu_72::Locale::getAvailableLocales(int&)";
      "icu_72::Locale::addLikelySubtags(UErrorCode&)";
      "icu_72::Locale::setUnicodeKeywordValue(icu_72::StringPiece, icu_72::StringPiece, UErrorCode&)";
      "icu_72::Locale::minimizeSubtags(UErrorCode&)";
      "icu_72::Locale::isRightToLeft() const";
      "icu_72::Locale::getDisplayLanguage(icu_72::Locale const&, icu_72::UnicodeString&) const";
      "icu_72::LocaleBuilder::LocaleBuilder()";
      "icu_72::MeasureUnit::MeasureUnit()";
      "icu_72::MeasureUnit::MeasureUnit(icu_72::MeasureUnit const&)";
      "icu_72::MeasureUnit::~MeasureUnit()";
      "icu_72::MeasureUnit::getAvailable(icu_72::MeasureUnit*, int, UErrorCode&)";
      "icu_72::MeasureUnit::getSubtype() const";
      "icu_72::MeasureUnit::getType()";
      "icu_72::MeasureUnit::getType() const";
      "icu_72::MeasureUnit::getPercent()";
      "icu_72::NumberingSystem::createInstance(icu_72::Locale const&, UErrorCode&)";
      "icu_72::NumberingSystem::getName() const";
      "icu_72::number::Notation::simple()";
      "icu_72::number::NumberFormatter::withLocale(icu_72::Locale const&)";
      "icu_72::number::LocalizedNumberFormatter::operator=(icu_72::number::LocalizedNumberFormatter&&)";
      "icu_72::number::LocalizedNumberFormatter::~LocalizedNumberFormatter()";
      "icu_72::number::NumberFormatterSettings<icu_72::number::LocalizedNumberFormatter>::unit(icu_72::MeasureUnit const&) const &";
      "icu_72::number::NumberFormatterSettings<icu_72::number::LocalizedNumberFormatter>::unitWidth(UNumberUnitWidth) const &";
      "icu_72::number::Precision::maxFraction(int)";
      "icu_72::number::NumberFormatterSettings<icu_72::number::LocalizedNumberFormatter>::precision(icu_72::number::Precision const&) const &";
      "icu_72::number::NumberFormatterSettings<icu_72::number::LocalizedNumberFormatter>::grouping(UNumberGroupingStrategy) const &";
      "icu_72::number::NumberFormatterSettings<icu_72::number::LocalizedNumberFormatter>::sign(UNumberSignDisplay) const &";
      "icu_72::number::NumberFormatterSettings<icu_72::number::LocalizedNumberFormatter>::notation(icu_72::number::Notation const&) const &";
      "icu_72::number::Precision::maxSignificantDigits(int)";
      "icu_72::number::Precision::minSignificantDigits(int)";
      "icu_72::number::IntegerWidth::zeroFillTo(int)";
      "icu_72::number::NumberFormatterSettings<icu_72::number::LocalizedNumberFormatter>::integerWidth(icu_72::number::IntegerWidth const&) const &";
      "icu_72::number::Precision::minFraction(int)";
      "icu_72::number::Notation::scientific()";
      "icu_72::number::Notation::engineering()";
      "icu_72::number::Notation::compactShort()";
      "icu_72::number::Notation::compactLong()";
      "icu_72::number::LocalizedNumberFormatter::formatDouble(double, UErrorCode&) const";
      "icu_72::number::FormattedNumber::toString(UErrorCode&) const";
      "icu_72::number::FormattedNumber::~FormattedNumber()";
      "icu_72::number::impl::StringProp::~StringProp()";
      "icu_72::number::Scale::~Scale()";
      "icu_72::number::impl::SymbolsWrapper::~SymbolsWrapper()";
      "icu_72::number::NumberFormatterSettings<icu_72::number::LocalizedNumberFormatter>::roundingMode(UNumberFormatRoundingMode) &&";
      "icu_72::number::Precision::minMaxSignificantDigits(int, int)";
      "icu_72::number::Precision::minMaxFraction(int, int)";
      "icu_72::number::FormattedNumber::operator=(icu_72::number::FormattedNumber&&)";
      "icu_72::PluralRules::select(icu_72::number::FormattedNumber const&, UErrorCode&) const";
      "icu_72::PluralRules::forLocale(icu_72::Locale const&, UPluralType, UErrorCode&)";
      "icu_72::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu_72::Locale const&, icu_72::NumberFormat*, UDateRelativeDateTimeFormatterStyle, UDisplayContext, UErrorCode&)";
      "icu_72::RelativeDateTimeFormatter::formatToValue(double, URelativeDateTimeUnit, UErrorCode&) const";
      "icu_72::RelativeDateTimeFormatter::formatNumericToValue(double, URelativeDateTimeUnit, UErrorCode&) const";
      "icu_72::SimpleDateFormat::SimpleDateFormat(icu_72::UnicodeString const&, icu_72::Locale const&, UErrorCode&)";
      "icu_72::StringPiece::StringPiece(char const*)";
      "icu_72::TimeZone::createTimeZone(icu_72::UnicodeString const&)";
      "icu_72::UnicodeString::UnicodeString(char const*, int)";
      "icu_72::UnicodeString::UnicodeString(char const*)";
      "icu_72::UnicodeString::UnicodeString(char16_t)";
      "icu_72::UnicodeString::UnicodeString(icu_72::UnicodeString const&)";
      "icu_72::UnicodeString::~UnicodeString()";
      "icu_72::UnicodeString::fromUTF8(icu_72::StringPiece)";
      "icu_72::UnicodeString::findAndReplace(int, int, icu_72::UnicodeString const&, int, int, icu_72::UnicodeString const&, int, int)";
      "icu_72::UnicodeString::toUTF8(icu_72::ByteSink&) const";
      "icu_72::UnicodeString::operator=(icu_72::UnicodeString&&)";
      "icu_72::UnicodeString::operator=(icu_72::UnicodeString const&)";
      "icu_72::UnicodeString::doAppend(icu_72::UnicodeString const&, int, int)";
      "icu_72::UnicodeString::doAppend(char16_t const*, int, int)";
      "icu_72::UMemory::operator new(unsigned long)";
      "icu_72::UMemory::operator new(unsigned int)";
      "icu_72::UMemory::operator delete(void*)";
      "icu_72::UnicodeString::char32At(int) const";
      "icu_72::BreakIterator::createLineInstance(icu_72::Locale const&, UErrorCode&)";
      "icu_72::GregorianCalendar::GregorianCalendar(UErrorCode&)";
      "icu_72::BuddhistCalendar::BuddhistCalendar(icu_72::Locale const&, UErrorCode&)";
      "icu_72::IndianCalendar::IndianCalendar(icu_72::Locale const&, UErrorCode&)";
      "icu_72::ChineseCalendar::ChineseCalendar(icu_72::Locale const&, UErrorCode&)";
      "icu_72::IslamicCalendar::IslamicCalendar(icu_72::Locale const&, UErrorCode&, icu_72::IslamicCalendar::ECalculationType)";
      "icu_72::CopticCalendar::CopticCalendar(icu_72::Locale const&, UErrorCode&)";
      "icu_72::EthiopicCalendar::EthiopicCalendar(icu_72::Locale const&, UErrorCode&, icu_72::EthiopicCalendar::EEraType)";
      "icu_72::HebrewCalendar::HebrewCalendar(icu_72::Locale const&, UErrorCode&)";
      "icu_72::GregorianCalendar::GregorianCalendar(icu_72::Locale const&, UErrorCode&)";
      "icu_72::JapaneseCalendar::JapaneseCalendar(icu_72::Locale const&, UErrorCode&)";
      "icu_72::PersianCalendar::PersianCalendar(icu_72::Locale const&, UErrorCode&)";
      "icu_72::Calendar::getTimeZone() const";
      "icu_72::Calendar::set(int, int, int)";
      "icu_72::Calendar::set(UCalendarDateFields, int)";
      "icu_72::Calendar::get(UCalendarDateFields, UErrorCode&) const";
      "icu_72::Calendar::setMinimalDaysInFirstWeek(unsigned char)";
      "icu_72::Calendar::setFirstDayOfWeek(UCalendarDaysOfWeek)";
      "icu_72::Calendar::getMinimalDaysInFirstWeek() const";
      "icu_72::Calendar::getFirstDayOfWeek() const";
      "icu_72::LocaleDisplayNames::createInstance(icu_72::Locale const&, UDialectHandling)";
      "icu_72::Normalizer2::getNFCInstance(UErrorCode&)";
      "icu_72::Normalizer2::getNFDInstance(UErrorCode&)";
      "icu_72::Normalizer2::getNFKCInstance(UErrorCode&)";
      "icu_72::Normalizer2::getNFKDInstance(UErrorCode&)";
      "icu_72::TimeZone::getDisplayName(signed char, icu_72::TimeZone::EDisplayType, icu_72::Locale const&, icu_72::UnicodeString&) const";
      "icu_72::AlphabeticIndex::AlphabeticIndex(icu_72::Locale const&, UErrorCode&)";
      "icu_72::LocaleBuilder::setRegion(icu_72::StringPiece)";
      "icu_72::LocaleBuilder::~LocaleBuilder()";
      "icu_72::LocaleBuilder::build(UErrorCode&)";
      "icu_72::Locale::getDisplayCountry(icu_72::Locale const&, icu_72::UnicodeString&) const";
      "icu_72::UnicodeString::replace(int, int, int)";
      "icu_72::Transliterator::createInstance(icu_72::UnicodeString const&, UTransDirection, UErrorCode&)";
      "icu_72::Transliterator::getAvailableIDs(UErrorCode&)";
      "icu_72::number::Scale::powerOfTen(int)";
      "icu_72::number::Precision::fixedFraction(int)";
      "icu_72::number::NumberFormatterSettings<icu_72::number::LocalizedNumberFormatter>::scale(icu_72::number::Scale const&) &&";
      "icu_72::number::NumberFormatterSettings<icu_72::number::LocalizedNumberFormatter>::precision(icu_72::number::Precision const&) &&";
      "icu_72::Locale::createFromName(char const*)";
      "u_charDigitValue_72";
      "icu_72::RegexPattern::compile(icu_72::UnicodeString const&, unsigned int, UParseError&, UErrorCode&)";
      "icu_72::RegexPattern::~RegexPattern()";
      "icu_72::UnicodeString::tempSubString(int, int) const";
      "icu_72::RegexPattern::matcher(icu_72::UnicodeString const&, UErrorCode&) const";
      icu_72::RegexMatcher::lookingAt*;
      icu_72::RegexMatcher::find*;
      "icu_72::RegexMatcher::groupCount() const";
      "icu_72::RegexMatcher::group(int, UErrorCode&) const";
      "icu_72::RegexMatcher::end(UErrorCode&) const";
      "icu_72::RegexMatcher::~RegexMatcher()";
      icu_72::RegexMatcher::matches*;
      "icu_72::RegexMatcher::find()";
      "icu_72::RegexMatcher::appendReplacement(icu_72::UnicodeString&, icu_72::UnicodeString const&, UErrorCode&)";
      "icu_72::RegexMatcher::appendTail(icu_72::UnicodeString&)";
      udata_setCommonData*;
      OH_ResourceManager_*;

      vtable?for?icu_72::UnicodeString;
      vtable?for?icu_72::FieldPosition;
      vtable?for?icu_72::FormattedRelativeDateTime;
      vtable?for?icu_72::LocaleBuilder;

      "HiLogPrint";

      "LogPrint(LogLevel, char const*, ...)";
      "LogPrint(LogLevel, char const*, std::__va_list)";
      "LogPrint(LogLevel, char const*, __va_list_tag*)";
      ARKUI_X_Plugin_*;
      OHOS::Plugin::PluginUtilsInner::*;
      OHOS::Plugin::PluginUtilsNApi::*;

      "OHOS::Ace::ToRSColor(OHOS::Ace::Color const&)";
      OHOS::Rosen::Drawing::Filter::*;
      OHOS::Rosen::Drawing::MaskFilter::*;
      OHOS::Rosen::Drawing::Path::*;
      OHOS::Ace::AnimationUtils::*;
      OHOS::Ace::NG::FocusHub::*;
      OHOS::Ace::NG::InputEventHub::*;
      OHOS::Ace::NG::InputEventActuator::*;
      "OHOS::Ace::LifeCycleCheckable::~LifeCycleCheckable()";
      "OHOS::Ace::LifeCycleCheckable::OnDetectedObjDestroyInUse()";
      "OHOS::Ace::Referenced::OnDetectedClaimDeathObj(bool)";
      
      OHOS::AppExecFwk::EventHandler::*;
      OHOS::AppExecFwk::EventRunner::*;
      OHOS::AppExecFwk::InnerEvent::*;
      fill_fopen_filefunc;
      unzOpen2;
      zipOpen2;
      zipOpenNewFileInZip4;
      unzClose;
      unzGetGlobalInfo;
      unzGetFilePos;
      unzGoToNextFile;
      unzGetCurrentFileInfo;
      unzOpenCurrentFile;
      unzReadCurrentFile;
      unzCloseCurrentFile;
      zipClose;
      zipWriteInFileInZip;
      zipCloseFileInZip;
      "OHOS::IncludeTrailingPathDelimiter(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::IncludeTrailingPathDelimiter(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char>> const&)";
      OHOS::Rosen::RSRenderServiceClient::*;
      OHOS::Rosen::DisplayInfo::*;
      OHOS::Rosen::DisplayManagerAgent::*;	  
      "OHOS::AbilityRuntime::GetNativePointerFromCallbackInfo(napi_env__*, napi_callback_info__*, char const*)";
      "OHOS::AbilityRuntime::CreateJsError(napi_env__*, int, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char>> const&)";
      "OHOS::AbilityRuntime::CreateJsError(napi_env__*, int, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::AbilityRuntime::BindNativeFunction(napi_env__*, napi_value__*, char const*, char const*, napi_value__* (*)(napi_env__*, napi_callback_info__*))";
      HiLogIsLoggable;
      HiLogSetAppMinLogLevel;
      HcfCreateCmsGenerator;
      HcfCmsGeneratorSpiCreate;
      OHOS::HiviewDFX::HiLog::*;
      OHOS::Media::ImageSource::*;
      OHOS::Ace::SubwindowManager::*;
      SkImage::*;
      ImageUtils::*;
      OHOS::MultimediaPlugin::PluginServer::*;
      OHOS::RefBase::*;
      RefBase::*;
      OHOS::Media::PixelMap::*;
      cJSON_IsString;
      cJSON_GetObjectItem;
      cJSON_ParseWithLength;
      "OHOS::Global::Resource::ResourceManagerImpl::GetResourcePaths()";
      "OHOS::Global::Resource::CreateResConfig()";
      "OHOS::Global::Resource::CreateResourceManager()";
      OHOS::Ace::Napi::LayeredDrawableDescriptor::GetPixelMapFromJsonBuf;
      "GrAHardwareBufferImageGenerator::GrAHardwareBufferImageGenerator(SkImageInfo const&, AHardwareBuffer*, SkAlphaType, bool, unsigned int, GrSurfaceOrigin)";
      vtable?for?OHOS::Ace::Napi::DrawableDescriptor;
      "OHOS::Ace::Napi::LayeredDrawableDescriptor::GetForeground()";
      "OHOS::Ace::Napi::LayeredDrawableDescriptor::GetBackground()";
      "OHOS::Ace::Napi::LayeredDrawableDescriptor::getPixelMap()";
      "OHOS::Ace::Napi::DrawableDescriptor::GetPixelMap()";
      "OHOS::Ace::Napi::LayeredDrawableDescriptor::GetMask()";
      "OHOS::Ace::Napi::LayeredDrawableDescriptor::GetStaticMaskClipPath()";
      "OHOS::Ace::Napi::JsDrawableDescriptor::Export(napi_env__*, napi_value__*)";
      "OHOS::Ace::ResourceAdapterImpl::GetPixelMap(unsigned int)";
      "OHOS::Ace::Napi::LayeredDrawableDescriptor::CreatePixelMap()";
      OHOS::Ace::InteractionImpl::*;
      OHOS::Ace::SystemProperties::extSurfaceEnabled_;
      OHOS::Ace::SystemProperties::layoutTraceEnable_;
      OHOS::Ace::AceScopedTraceFlag::*;
      OHOS::Ace::FrameReport::*;
      OHOS::Ace::NG::PipelineContext::*;
      OHOS::Ace::BackEndEventIdManager::*;
      OHOS::Ace::DumpLog::*;
      OHOS::Ace::ContainerScope::*;
      VTT?for?OHOS::Ace::NG::AccessibilityProperty;
      vtable?for?OHOS::Ace::NG::AccessibilityProperty;
      OHOS::Ace::NG::EventHub::*;
      VTT?for?OHOS::Ace::NG::EventHub;
      vtable?for?OHOS::Ace::NG::EventHub;
      OHOS::Ace::NG::RenderSurface::*;
      OHOS::Ace::NG::RenderContext::*;
      OHOS::Ace::Recorder::EventRecorder::*;
      OHOS::Ace::Recorder::EventParamsBuilder::*;
      OHOS::MMI::KeyEvent::*;

      vtable?for?OHOS::Rosen::LinearInterpolator;
      VTT?for?OHOS::Rosen::LinearInterpolator;
      OHOS::Rosen::RSSystemProperties::*;
      OHOS::Rosen::RSCommandFactory::*;
      OHOS::Rosen::RSNodeGetAnimationsValueFraction::*;
      OHOS::Rosen::RSInterpolator::*;
      OHOS::Ace::UdmfClient::*;
      OHOS::Ace::NG::DragDropFuncWrapper::*;
      OHOS::Ace::InteractionInterface::*;
      OHOS::Msdp::DeviceStatus::InteractionManager::*;
      OHOS::Ace::PixelMap::*;
      panda::JSValueRef::*;
      panda::ObjectRef::*;
      "NapiValueToLocalValue(napi_value__*)";

      "panda::os::thread::GetCurrentThreadId()";
      "panda::GetStacktrace()";
      "panda::PrintStack(std::__ndk1::vector<unsigned long, std::__ndk1::allocator<unsigned long> > const&, std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >&)";
      "panda::time::GetCurrentTimeInMillis(bool)";
      panda::Logger::logger;
      "panda::Logger::Message::~Message()";
      panda::panda_file::*;
      "panda::utf::Mutf8Size(unsigned char const*)";
      "panda::utf::ConvertRegionMUtf8ToUtf16(unsigned char const*, unsigned short*, unsigned long, unsigned long, unsigned long)";
      "panda::os::unix::memory::futex::Mutex::Mutex()";
      "panda::os::unix::memory::futex::Mutex::Lock()";
      "panda::os::unix::memory::futex::Mutex::Unlock()";
      "panda::os::mem::MmapDeleter(std::byte*, unsigned long)";
      "panda::PrintStack(std::__ndk1::vector<unsigned int, std::__ndk1::allocator<unsigned int> > const&, std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >&)";
      "panda::utf::ConvertRegionMUtf8ToUtf16(unsigned char const*, unsigned short*, unsigned int, unsigned int, unsigned int)";
      "panda::os::mem::MmapDeleter(std::byte*, unsigned int)";
      "OHOS::HiviewDFX::AppEventStore::GetInstance()";
      "OHOS::HiviewDFX::AppEventStore::DeleteData(long, std::__ndk1::vector<long, std::__ndk1::allocator<long> > const&)";
      "OHOS::HiviewDFX::AppEventPack::GetSeq() const";
      "OHOS::HiviewDFX::AppEventPack::GetEventStr() const";
      "OHOS::HiviewDFX::AppEventStore::QueryEvents(std::__ndk1::vector<std::__ndk1::shared_ptr<OHOS::HiviewDFX::AppEventPack>, std::__ndk1::allocator<std::__ndk1::shared_ptr<OHOS::HiviewDFX::AppEventPack> > >&, long, unsigned int)";
      "OHOS::HiviewDFX::NapiUtil::GetProperty(napi_env__*, napi_value__*, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::NapiUtil::IsObject(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::IsValidEventType(int)";
      "OHOS::HiviewDFX::NapiUtil::IsString(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::AppEventStore::QueryEvents(std::__ndk1::vector<std::__ndk1::shared_ptr<OHOS::HiviewDFX::AppEventPack>, std::__ndk1::allocator<std::__ndk1::shared_ptr<OHOS::HiviewDFX::AppEventPack> > >&, long, unsigned int)";
      "OHOS::HiviewDFX::NapiUtil::CreateErrMsg(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::NapiUtil::CreateErrMsg(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::NapiUtil::GetInt32(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::NapiUtil::IsNumber(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::NapiUtil::CreateNull(napi_env__*)";
      "OHOS::HiviewDFX::NapiUtil::CreateEventInfoArray(napi_env__*, std::__ndk1::vector<std::__ndk1::shared_ptr<OHOS::HiviewDFX::AppEventPack>, std::__ndk1::allocator<std::__ndk1::shared_ptr<OHOS::HiviewDFX::AppEventPack> > > const&)";
      "OHOS::HiviewDFX::NapiUtil::CreateStrings(napi_env__*, std::__ndk1::vector<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::allocator<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > const&)";
      "OHOS::HiviewDFX::NapiUtil::CreateInt32(napi_env__*, int)";
      "OHOS::HiviewDFX::NapiUtil::CreateObject(napi_env__*)";
      "OHOS::HiviewDFX::NapiUtil::CreateUndefined(napi_env__*)";
      "OHOS::HiviewDFX::NapiUtil::ThrowError(napi_env__*, int, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, bool)";
      "OHOS::HiviewDFX::NapiUtil::CreateReference(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::NapiUtil::SetNamedProperty(napi_env__*, napi_value__*, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, napi_value__*)";
      "OHOS::HiviewDFX::AppEventStore::QueryObserverSeq(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, long)";
      "OHOS::HiviewDFX::NapiUtil::GetString(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::NapiUtil::SetNamedProperty(napi_env__*, napi_value__*, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, napi_value__*)";
      "OHOS::HiviewDFX::NapiUtil::CreateReference(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::NapiUtil::ThrowError(napi_env__*, int, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, bool)";
      "OHOS::HiviewDFX::HiAppEventConfig::GetInstance()";
      "OHOS::HiviewDFX::AppEventParam::~AppEventParam()";
      "OHOS::HiviewDFX::NapiUtil::IsFunction(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::AppEventPack::AppEventPack(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, int)";
      "OHOS::HiviewDFX::NapiUtil::GetPropertyNames(napi_env__*, napi_value__*, std::__ndk1::vector<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::allocator<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > >&)";
      "OHOS::HiviewDFX::NapiUtil::IsArray(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::AppEventPack::AddParam(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, double)";
      "OHOS::HiviewDFX::NapiUtil::GetDouble(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::AppEventPack::AddParam(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::AppEventPack::AddParam(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, bool)";
      "OHOS::HiviewDFX::NapiUtil::GetBoolean(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::NapiUtil::GetType(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::AppEventPack::AddParam(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::vector<bool, std::__ndk1::allocator<bool> > const&)";
      "OHOS::HiviewDFX::NapiUtil::GetBooleans(napi_env__*, napi_value__*, std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >&)";
      "OHOS::HiviewDFX::AppEventPack::AddParam(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::vector<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::allocator<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > const&)";
      "OHOS::HiviewDFX::NapiUtil::GetStrings(napi_env__*, napi_value__*, std::__ndk1::vector<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::allocator<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > >&)";
      "OHOS::HiviewDFX::AppEventPack::AddParam(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::vector<double, std::__ndk1::allocator<double> > const&)";
      "OHOS::HiviewDFX::NapiUtil::GetDoubles(napi_env__*, napi_value__*, std::__ndk1::vector<double, std::__ndk1::allocator<double> >&)";
      "OHOS::HiviewDFX::AppEventPack::AddParam(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::NapiUtil::GetArrayType(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::NapiUtil::CreateErrMsg(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, napi_valuetype)";
      "OHOS::HiviewDFX::NapiUtil::ConvertToString(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::HiAppEventConfig::SetConfigurationItem(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >)";
      "OHOS::HiviewDFX::NapiUtil::CreateString(napi_env__*, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::NapiUtil::GetCbInfo(napi_env__*, napi_callback_info__*, napi_value__**, unsigned long)";
      "OHOS::HiviewDFX::VerifyAppEvent(std::__ndk1::shared_ptr<OHOS::HiviewDFX::AppEventPack>)";
      "OHOS::HiviewDFX::TimeUtil::GetMilliseconds()";
      "OHOS::HiviewDFX::HiAppEventClean::ClearData()";
      "OHOS::HiviewDFX::IsValidUserIdName(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::IsValidUserIdValue(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::HiAppEvent::UserInfo::GetInstance()";
      "OHOS::HiviewDFX::HiAppEvent::UserInfo::SetUserId(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::HiAppEvent::UserInfo::RemoveUserId(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::HiAppEvent::UserInfo::GetUserId(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&)";
      "OHOS::HiviewDFX::IsValidUserPropName(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::IsValidUserPropValue(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::HiAppEvent::UserInfo::SetUserProperty(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::HiAppEvent::UserInfo::RemoveUserProperty(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::HiAppEvent::UserInfo::GetUserProperty(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&)";
      "OHOS::HiviewDFX::NapiUtil::IsArrayType(napi_env__*, napi_value__*, napi_valuetype)";
      "OHOS::HiviewDFX::NapiUtil::GetArrayLength(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::NapiUtil::GetElement(napi_env__*, napi_value__*, unsigned int)";
      "OHOS::HiviewDFX::NapiUtil::GetStringsToSet(napi_env__*, napi_value__*, std::__ndk1::unordered_set<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > >&)";
      "OHOS::HiviewDFX::IsValidDomain(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::NapiUtil::GetInt32s(napi_env__*, napi_value__*, std::__ndk1::vector<int, std::__ndk1::allocator<int> >&)";
      "OHOS::HiviewDFX::HiAppEvent::AppEventFilter::AppEventFilter(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unordered_set<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > const&, unsigned int)";
      "OHOS::HiviewDFX::NapiAppEventWatcher::NapiAppEventWatcher(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::vector<OHOS::HiviewDFX::HiAppEvent::AppEventFilter, std::__ndk1::allocator<OHOS::HiviewDFX::HiAppEvent::AppEventFilter> > const&, OHOS::HiviewDFX::HiAppEvent::TriggerCondition)";
      "OHOS::HiviewDFX::NapiAppEventWatcher::InitTrigger(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::NapiAppEventWatcher::InitReceiver(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::AppEventObserverMgr::GetInstance()";
      "OHOS::HiviewDFX::AppEventObserverMgr::RegisterObserver(std::__ndk1::shared_ptr<OHOS::HiviewDFX::HiAppEvent::AppEventObserver>)";
      "OHOS::HiviewDFX::NapiUtil::CreateInt64(napi_env__*, long)";
      "OHOS::HiviewDFX::NapiAppEventWatcher::InitHolder(napi_env__*, napi_value__*)";
      "OHOS::HiviewDFX::AppEventPack::AddParam(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, long)";
      "OHOS::HiviewDFX::AppEventPack::AddParam(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, char const*)";
      "OHOS::HiviewDFX::VerifyCustomEventParams(std::__ndk1::shared_ptr<OHOS::HiviewDFX::AppEventPack>)";
      "OHOS::HiviewDFX::SetEventParam(std::__ndk1::shared_ptr<OHOS::HiviewDFX::AppEventPack>)";
      "OHOS::HiviewDFX::NapiUtil::CreateObject(napi_env__*, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, napi_value__*)";
      "OHOS::HiviewDFX::AppEventObserverMgr::UnregisterObserver(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, OHOS::HiviewDFX::ObserverType)";
      "OHOS::HiviewDFX::IsValidWatcherName(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::NapiAppEventWatcher::~NapiAppEventWatcher()";
      "OHOS::HiviewDFX::WriteEvent(std::__ndk1::shared_ptr<OHOS::HiviewDFX::AppEventPack>)";
      "OHOS::HiviewDFX::NapiUtil::CreateError(napi_env__*, int, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "OHOS::HiviewDFX::AppEventPack::AddParam(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, int)";
      "OHOS::HiviewDFX::AppEventStore::QueryObserverSeq(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, long long)";
      "OHOS::HiviewDFX::AppEventStore::QueryEvents(std::__ndk1::vector<std::__ndk1::shared_ptr<OHOS::HiviewDFX::AppEventPack>, std::__ndk1::allocator<std::__ndk1::shared_ptr<OHOS::HiviewDFX::AppEventPack> > >&, long long, unsigned int)";
      "OHOS::HiviewDFX::AppEventStore::DeleteData(long long, std::__ndk1::vector<long long, std::__ndk1::allocator<long long> > const&)";
      "OHOS::HiviewDFX::NapiUtil::GetCbInfo(napi_env__*, napi_callback_info__*, napi_value__**, unsigned int)";
      "OHOS::HiviewDFX::NapiUtil::CreateInt64(napi_env__*, long long)";
      "OHOS::HiviewDFX::AppEventPack::AddParam(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, long long)";
      OH_NativeWindow_CreateNativeWindowFromSurfaceId;

      "HitracePerfScoped::HitracePerfScoped(bool, unsigned long, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "HitracePerfScoped::HitracePerfScoped(bool, unsigned long long, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&)";
      "HitracePerfScoped::~HitracePerfScoped()";
      "HitraceMeterFmtScoped::HitraceMeterFmtScoped(unsigned long, char const*, ...)";
      "HitraceMeterFmtScoped::HitraceMeterFmtScoped(unsigned long long, char const*, ...)";
    };
    extern "C" {
      "StartTrace";
      "StartTraceEx";
      "FinishTrace";
      "FinishTraceEx";
      "StartAsyncTrace";
      "StartAsyncTraceEx";
      "FinishAsyncTrace";
      "FinishAsyncTraceEx";
      "CountTrace";
      "CountTraceEx";
      "IsTagEnabled";
    };
  local:
    *;
};
